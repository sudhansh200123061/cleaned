lga ncrypt sourc  got number request code  written x asm borland tasm  tasm lga asm tlink lga asm   code   lga ncryption c nick nassuphi   code segment assum c code d code  org h  start jmp begin    ga particl assig  bit particl move east bit particl move west bit particl move north bit particl move south  bit particl move east bit particl move west bit particl move north bit particl move south   collisiong rule  ga rule  e w n e w n n e w n e w  nibbl     byte            reflect rule  swap bit along direct     look tabl implement two particl collis hpp lattic ga  hpprule db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b   rule implement veloc revers need run ga evolut revers call wallrul particl hit wall head  wallrul db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b db b   maxbyt equ lineno equ  srcptr dw offset buffer desptr dw offset buffer  savebuff db maxbyt lineno dup  buffer db maxbyt lineno dup db dup  buffer db maxbyt lineno dup db dup        data db db db db test lattic ga base encrypt db algorithm data encod particl db digit ga whose time evolut simul db cellular automaton type algorithm decrypt db achiev run simul revers db thermodynam argument ensur even singl db bit flip decrypt data possibl db db ga let evolv timestep db one either run revers evolut press db space flip bit run press db db cryptograph applic key would consist db number time step time locat db specif bit invers db db db db db   fill ga piec code  initga mov di c srcptr mov si offset data  mov cx lineno ig push di push cx mov cx maxbyt ig mov al c si mov c di al inc si inc di loop ig pop cx pop di add di maxbyt loop ig mov si c srcptr mov di offset initga mov cx maxbyt mov al lg mov byte ptr c si al al inc si loop lg ret    display ga molecul bounc around  showga push e push si push di push cx push bx  mov ax bh mov e ax mov si c srcptr mov di mov cx lineno add si maxbyt sg push cx push di  mov cx maxbyt sg mov al c si mov byte ptr e di al inc si add di dec cx jnz sg  pop di pop cx add di loop sg  pop bx pop cx pop di pop si pop e ret    c si sour data c di destin data  scanonemiddlelin  first byte special case warparound  mov bl al assembl byte mov bh c si maxbyt north one line lower bh b bit bl bh assembl byte mov bh c si maxbyt south one line higher bh b bit bl bh place stuff al mov bh c si maxbyt west one byte left lower bh b bit bl bh mov bh c si east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di  middl byte handl loop  mov cx maxbyt sol mov bl al assembl byte mov bh c si maxbyt north one line lower bh b bit bl bh assembl byte mov bh c si maxbyt south one line higher bh b bit bl bh place stuff al mov bh c si west one byte left lower bh b bit bl bh mov bh c si east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di loop sol  last byte also special  mov bl al assembl byte mov bh c si maxbyt north one line lower bh b bit bl bh assembl byte mov bh c si maxbyt south one line higher bh b bit bl bh place stuff al mov bh c si west one byte left lower bh b bit bl bh mov bh c si maxbyt east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di ret     c si sour data c di destin data  scanfirstlin  first byte special case warparound  mov bl mov bh c si maxbyt lineno bh b bit bl bh assembl byte mov bh c si maxbyt bh b bit bl bh place stuff al mov bh c si maxbyt west one byte left lower bh b bit bl bh mov bh c si east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di  middl byte handl loop  mov cx maxbyt sfl mov bl al assembl byte mov bh c si maxbyt lineno bh b bit bl bh assembl byte mov bh c si maxbyt bh b bit bl bh place stuff al mov bh c si west one byte left lower bh b bit bl bh mov bh c si east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di loop sfl  last byte also special  mov bl al assembl byte mov bh c si maxbyt lineno bh b bit bl bh assembl byte mov bh c si maxbyt bh b bit bl bh place stuff al mov bh c si west one byte left lower bh b bit bl bh mov bh c si maxbyt east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al ret     c si sour data c di destin data  scanlastlin  first byte special case warparound  mov bl al assembl byte mov bh c si maxbyt bh b bit bl bh assembl byte mov bh c si maxbyt lineno bh b bit bl bh place stuff al mov bh c si maxbyt west one byte left lower bh b bit bl bh mov bh c si east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di  middl byte handl loop  mov cx maxbyt sll mov bl al assembl byte mov bh c si maxbyt bh b bit bl bh assembl byte mov bh c si maxbyt lineno bh b bit bl bh place stuff al mov bh c si west one byte left lower bh b bit bl bh mov bh c si east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di loop sll  last byte also special  mov bl al assembl byte mov bh c si maxbyt bh b bit bl bh assembl byte mov bh c si maxbyt lineno bh b bit bl bh place stuff al mov bh c si west one byte left lower bh b bit bl bh mov bh c si maxbyt east one byte right higher bh b bit bl bh mov bh mov al byte ptr c bx offset hpprule mov c di al inc si inc di ret      invert veloc ga  invertal push bx push cx push si mov si c srcptr mov bx mov cx lineno ia push cx mov cx maxbyt ia mov bl c si mov al byte ptr c bx offset wallrul mov c si al inc si loop ia pop cx loop ia pop si pop cx pop bx ret     iterateonc mov si c srcptr mov di c desptr mov c srcptr di mov c desptr si  push si push di call scanfirstlin pop di pop si add si maxbyt add di maxbyt mov cx lineno dont scan first last l push si push di push cx call scanonemiddlelin pop cx pop di pop si add si maxbyt add di maxbyt loop l  push si push di call scanlastlin pop si pop di l ret    iter hpp rule cx time  iter push cx call iterateonc pop cx call showga loop iter ret    iter hpp rule cx time  iterateuntil mov si mov cx offset iu offset iu iu mov al byte ptr c si offset iu xor byte ptr c si offset iu al inc si loop iu iu call iterateonc call showga mov si c srcptr mov cx maxbyt mov bx mov ah mov al iu mov bl byte ptr c si mov dl byte ptr c bx wallrul ah xor dl ah al dl inc si loop iu mov si mov cx offset iu offset iu iu mov ah byte ptr c si offset iu ah al xor byte ptr c si offset iu ah inc si loop iu jmp iu iu mov ax offset iu push ax ret db dup h iu push ax push bx push cx push dx push d  mov ah mov dx c msgptr int h  pop d pop dx pop cx pop bx pop ax ret  db dup h  msgptr dw offset msg msg db messag print db code decrypt use data lattic db appli decod routin db everi time step db decod function left code unchang db except ga evolut completelli db revers thermal   time equ repetit enough equilibr ga  begin mov ax h mov bh mov dh mov dl mov cx int h  mov ah mov bh mov dh mov dl int h  call initga call showga mov ah int h push cx mov cx time call iter call invertal call showga mov ah int h cmp al jne begin mov si c srcptr xor byte ptr c si b begin mov cx time call iterateuntil call invertal call showga mov ax ch int h   code end end start  